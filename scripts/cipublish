#!/bin/bash

set -e

if [[ -n "${RF_DEBUG}" ]]; then
    set -x
fi

DIR="$(dirname "$0")"

function usage() {
    echo -n \
"Usage: $(basename "$0")

--jars Only publish build artifacts to Sonatype OSSRH.
--containers Only publish container images to ECR.

Publish container images to Elastic Container Registry (ECR) and
build artifacts to Sonatype OSS Repository Hosting (OSSRH).
"
}

if [[ -n "${GIT_COMMIT}" ]]; then
    GIT_COMMIT="${GIT_COMMIT:0:7}"
else
    GIT_COMMIT="$(git rev-parse --short HEAD)"
fi

function publish_jars() {
  # Sonatype OSSRH (Snapshot Repository).
  if [ "$(whoami)" == "jenkins" ]; then
      projects=( \
          "api" \
          "authentication" \
          "batch" \
          "bridge" \
          "common" \
          "datamodel" \
          "db" \
          "tile" \
          "tool"
      )

      for project in "${projects[@]}"
      do
          echo "Publishing ${project} artifact"

          docker-compose \
             -f "${DIR}/../docker-compose.test.yml" \
             run --rm --no-deps \
             -e SONATYPE_USERNAME="${SONATYPE_USERNAME}" \
             -e SONATYPE_PASSWORD="${SONATYPE_PASSWORD}" \
             -e PGP_HEX_KEY="${PGP_HEX_KEY}" \
             -e PGP_PASSPHRASE="${PGP_PASSPHRASE}" \
             build gitSnapshots "${project}/publishSigned"
      done
  else
      echo "ERROR: Not running as Jenkins user."
      exit 1
  fi
}

function publish_jar() {
  # Sonatype OSSRH (Snapshot Repository).
  if [ "$(whoami)" == "jenkins" ]; then
    echo "Publishing ${1} artifact"

    docker-compose \
       -f "docker-compose.test.yml" \
       run --rm --no-deps \
       -e SONATYPE_USERNAME="${SONATYPE_USERNAME}" \
       -e SONATYPE_PASSWORD="${SONATYPE_PASSWORD}" \
       -e PGP_HEX_KEY="${PGP_HEX_KEY}" \
       -e PGP_PASSPHRASE="${PGP_PASSPHRASE}" \
       build gitSnapshots "${1}/publishSigned"
  else
      echo "ERROR: Not running as Jenkins user."
      exit 1
  fi
}

function publish_containers() {
  if [[ -n "${AWS_ECR_ENDPOINT}" ]]; then
      # Evaluate the return value of the get-login subcommand, which
      # is a docker login command with temporarily ECR credentials.
      eval "$(aws ecr get-login --no-include-email)"

      docker tag "raster-foundry-nginx-api:${GIT_COMMIT}" \
             "${AWS_ECR_ENDPOINT}/raster-foundry-nginx-api:${GIT_COMMIT}"
      docker tag "raster-foundry-nginx-tiler:${GIT_COMMIT}" \
             "${AWS_ECR_ENDPOINT}/raster-foundry-nginx-tiler:${GIT_COMMIT}"

      docker tag "raster-foundry-api-server:${GIT_COMMIT}" \
             "${AWS_ECR_ENDPOINT}/raster-foundry-api-server:${GIT_COMMIT}"
      docker tag "raster-foundry-tile-server:${GIT_COMMIT}" \
             "${AWS_ECR_ENDPOINT}/raster-foundry-tile-server:${GIT_COMMIT}"
      docker tag "raster-foundry-batch:${GIT_COMMIT}" \
             "${AWS_ECR_ENDPOINT}/raster-foundry-batch:${GIT_COMMIT}"
      docker tag "raster-foundry-app-migrations:${GIT_COMMIT}" \
             "${AWS_ECR_ENDPOINT}/raster-foundry-migrations:${GIT_COMMIT}"

      docker tag "raster-foundry-nginx-backsplash:${GIT_COMMIT}" \
              "${AWS_ECR_ENDPOINT}/raster-foundry-nginx-backsplash:${GIT_COMMIT}"
      docker tag "raster-foundry-backsplash:${GIT_COMMIT}" \
              "${AWS_ECR_ENDPOINT}/raster-foundry-backsplash:${GIT_COMMIT}"

      docker push "${AWS_ECR_ENDPOINT}/raster-foundry-nginx-api:${GIT_COMMIT}"
      docker push "${AWS_ECR_ENDPOINT}/raster-foundry-nginx-tiler:${GIT_COMMIT}"

      docker push "${AWS_ECR_ENDPOINT}/raster-foundry-api-server:${GIT_COMMIT}"
      docker push "${AWS_ECR_ENDPOINT}/raster-foundry-tile-server:${GIT_COMMIT}"
      docker push "${AWS_ECR_ENDPOINT}/raster-foundry-batch:${GIT_COMMIT}"
      docker push "${AWS_ECR_ENDPOINT}/raster-foundry-migrations:${GIT_COMMIT}"

      docker push "${AWS_ECR_ENDPOINT}/raster-foundry-nginx-backsplash:${GIT_COMMIT}"
      docker push "${AWS_ECR_ENDPOINT}/raster-foundry-backsplash:${GIT_COMMIT}"

  else
      echo "ERROR: No AWS_ECR_ENDPOINT variable defined."
      exit 1
  fi
}

if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    if [ "${1:-}" = "--help" ]; then
        usage
    elif [ "${1:-}" = "--jars" ]; then
        publish_jars
    elif [ "${1:-}" = "--containers" ]; then
        publish_containers
    elif [ "${1:-}" = "--publish-jar" ]; then
        publish_jar "$2"
    else
        publish_jars
        publish_containers
    fi
fi
